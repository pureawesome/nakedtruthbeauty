<?php

/**
 * @file
 * Code for the Site Products feature.
 */

include_once 'site_products.features.inc';

/**
 * Implements hook_menu().
 */
function site_products_menu() {
  $items = array();

  $items['ajax/shop/type/%'] = array(
    'page callback' => 'site_products_get_shop_view',
    'page arguments' => array(3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Get object taxonomy ids.
 *
 * @param object $object
 *   Taxonomy item.
 *
 * @return int|null
 *   Integer or null
 */
function site_products_return_tids($object) {
  if (!empty($object->tid)) {
    return $object->tid;
  }
  else {
    return NULL;
  }
}

/**
 * AJAX callback shop view.
 *
 * @param string $term
 *   The taxonomy term to filter with.
 */
function site_products_get_shop_view($term) {
  $tids = [];
  $tid = NULL;
  $vocabs = taxonomy_vocabulary_get_names();
  $vid = $vocabs['product_types']->vid;
  $tree = taxonomy_get_tree($vid);
  $tids = array_map('site_products_return_tids', $tree);
  $terms = taxonomy_term_load_multiple($tids);

  foreach ($terms as $key => $taxonomy) {
    $alias = $taxonomy->field_url[LANGUAGE_NONE][0]['value'];

    if ($alias == $term) {
      $tid = $key;
      break;
    }
  }

  $view = views_get_view('shop');
  $view->set_display('block_no_filter');
  $view->add_item($view->current_display, 'filter', 'field_data_field_product_type', 'field_product_type_tid', array('value' => $tid, 'group' => 1));
  $view->pre_execute();
  $view->execute();
  print $view->render();
}

/**
 * Implements hook_entity_info_alter().
 */
function site_products_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['product'] = array(
    'label' => t('Product'),
    'custom settings' => FALSE,
  );

  $entity_info['node']['view modes']['add_to_cart'] = array(
    'label' => t('Add to Cart'),
    'custom settings' => FALSE,
  );

  $entity_info['node']['view modes']['product_square'] = array(
    'label' => t('Product Square'),
    'custom settings' => FALSE,
  );
}

/**
 * Implements hook_preprocess_views_view().
 */
function site_products_preprocess_views_view(&$vars) {
  if ($vars['view']->name == 'shop') {
    $vars['classes_array'][] = 'row';
    drupal_add_library('site_products', 'site_shop');
  }
}

/**
 * Implements hook_node_view().
 */
function site_products_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'product_display' && $view_mode == 'full') {
    drupal_add_library('site_products', 'site_products');
  }
}

/**
 * Implements hook_library().
 */
function site_products_library() {
  $libraries['site_shop'] = array(
    'title' => 'NTB Shop',
    'version' => '1.1',
    'js' => array(
      drupal_get_path('module', 'site_products') . '/js/site_shop.min.js' => array(
        'defer' => TRUE,
        'scope' => 'footer',
      ),
    ),
  );
  return $libraries;
}

/**
 * Implements hook_preprocess_node().
 */
function site_products_preprocess_node(&$vars) {
  if ($vars['type'] == 'product_display' && $vars['view_mode'] == 'product_square') {

    $vars['theme_hook_suggestions'][] = 'node__product_square';
    $node = $vars['node'];
    $type = $node->type;

    $image_arr = $vars['field_primary_image'][0];
    [$image_alt, $image_title] = site_general_get_alt_title($image_arr, $node->title);
    $img_array = [
      '#theme' => 'image_style',
      '#style_name' => 'square_500x500',
      '#path' => $image_arr['uri'],
      '#alt' => $image_alt,
      '#title' => $image_title,
    ];
    $image = drupal_render($img_array);
    $vars['image'] = l($image, $vars['node_url'], array('html' => TRUE));

    $vars['product_category'] = $vars['elements']['product:field_product_type'][0]['#title'];
    $vars['price'] = $vars['content']['product:commerce_price'][0]['#markup'];
    $vars['cart'] = $vars['elements']['field_product'];

    $vars['cart_link'] = 'commerce/add-to-cart/' . $vars['field_product'][0]['product_id'];
  }

  if ($vars['type'] == 'product_display' && $vars['view_mode'] == 'full') {
    $ingredients = $vars['field_product_ingredients'];
    $ingredient_list = array();

    foreach ($ingredients as $ingredient) {
      $entity = $ingredient['entity'];
      $name = field_get_items('node', $entity, 'field_ingredient_scientific_name');
      $link = l($name[0]['value'], 'node/' . $entity->nid, array('attributes' => array('target' => '_blank')));
      array_push($ingredient_list, $link);
    }

    // TODO: Fix this and make it better.
    $tid = $vars['field_product_type'][LANGUAGE_NONE][1]['tid'] ?? $vars['field_product_type'][LANGUAGE_NONE][0]['tid'];
    $products = taxonomy_select_nodes($tid);
    $product_links = [
      'items' => [],
      'title' => '',
      'type' => 'ul',
      'attributes' => [
        'class' => ['inline', 'related-list'],
      ],
    ];

    foreach ($products as $product) {
      $node = node_load($product);
      $link_title = $node->title;
      $uri = drupal_get_path_alias('node/' . $product);
      $img_array = [
        '#theme' => 'image_style',
        '#style_name' => 'thumbnail',
        '#path' => $node->field_primary_image[LANGUAGE_NONE][0]['uri'],
        '#alt' => $node->title,
        '#title' => $node->title,
      ];
      $image = drupal_render($img_array);
      $link = l($image, '/' . $uri, array('html' => TRUE));
      $product_links['items'][] = $link;
    }

    $vars['product_type_list'] = theme_item_list($product_links);
    $vars['scientific_ingredients'] = implode(', ', $ingredient_list);
  }
}
